/** * Setting.js */import React, {Component} from "react";import {Image, StatusBar, StyleSheet, Text, View,ScrollView,TouchableOpacity,TextInput} from "react-native";import {connect} from "react-redux";import {TopToolBar,ACTION_HELP} from '../components/TopToolBar';import {BottomToolBar, ACTION_BACK, ACTION_DISCOUNT,ACTION_LOGOUT} from '../components/BottomToolBar';import * as authActions from "../actions/auth-actions";import strings from "../resources/strings"import constants from '../resources/constants';import Button from "../components/Button";import {SCREEN_HEIGHT, SCREEN_WIDTH, getTabBarHeight, showCenterToast} from "../utils/tools";import Modal from "react-native-modalbox";import CountDown from 'react-native-zycountdown';import colors from "../resources/colors";import Icon from 'react-native-vector-icons/FontAwesome';import * as orderActions from "../actions/order-actions";import {Clause} from "./Clause";export class Setting extends Component {    constructor(props) {        super(props);        this.state={            verifyTel:'',            verifyCode:null,            inputCode:null        };    }    render() {        const navigator = this.props.navigation;        return (            <View style={styles.container}>                <TopToolBar title = {strings.setting} navigation = {this.props.navigation}                            _onLeftIconPress={this._onVolumeIconPress}                            _onRightIconPress={this._onHelpIconPress}/>                <View style={{flex:1}}>                    <TouchableOpacity                        onPress={()=>{this._onChangeTelPress()}}                    >                        <View style={styles.row}>                            <Text allowFontScaling={false} style={styles.rowText}>{strings.reset_tel}</Text>                            <Icon name="angle-right" size={30} color='eee' />                        </View>                    </TouchableOpacity>                    <TouchableOpacity                        onPress={()=>{this.props.navigation.navigate('QRCode')}}                    >                        <View style={styles.row}>                            <Text allowFontScaling={false} style={styles.rowText}>{strings.to_friends}</Text>                            <Icon name="angle-right" size={30} color='eee' />                        </View>                    </TouchableOpacity>                    <TouchableOpacity                        onPress={()=>{this.props.navigation.navigate('Clause')}}                    >                        <View style={styles.row}>                            <Text allowFontScaling={false} style={styles.rowText}>{strings.clause}</Text>                            <Icon name="angle-right" size={30} color='eee' />                        </View>                    </TouchableOpacity>                    {this._renderVerify()}                </View>                <BottomToolBar navigation={this.props.navigation}                               leftAction={ACTION_BACK}                               _onLeftIconPress={this._onBackIconPress}                />            </View>        );    }    _onChangeTelPress=()=>{this.refs.verify.open()}    _onVolumeIconPress =() =>{};    _onHelpIconPress =() =>{};    _onBackIconPress = () => {        this.props.navigation.pop()    };    _renderVerify(){        return(            <Modal                style={[styles.modalbox,{backgroundColor:"rgb(220,228,242)",justifyContent:'center'}]}                position={"center"}                ref={"verify"}                transparent={false}                animationType={"slide"}            >                <View style={{alignItems:'center',justifyContent:'space-around'}}>                    <View style={{width:SCREEN_WIDTH,padding:20,justifyContent:'space-around',alignItems:'center'}}>                        <TextInput                            style={{width:SCREEN_WIDTH*0.6,height:35,backgroundColor:colors.baseWhite,borderRadius:5,padding:5}}                            keyboardType={'numeric'}                            allowFontScaling={false}                            placeholder={strings.input_tel}                            placeholderTextColor={colors.baseBlack}                            onChangeText={(value) =>{                                this.setState({verifyTel:value})                            }}                        />                        <CountDown                            style={{width:'auto',justifyContent:'center',height:'auto',alignItems:'center',padding:10,borderRadius:5,backgroundColor:colors.primaryColor,marginTop:20}}                            textStyle={{color: 'white'}}                            count={60}                            title={strings.get_code}                            behindText={' segs.'}                            frontText={'Reenviar cÃ³digo '}                            onClick={this.fetchCode}                        />                    </View>                    <View style={{width:SCREEN_WIDTH*0.8,padding:20,justifyContent:'center',alignItems:'center'}}>                        <Text style={{marginRight:10,fontSize:16}} allowFontScaling={false}>{strings.check_code}:</Text>                        <TextInput                            style={{width:SCREEN_WIDTH*0.6,height:35,backgroundColor:colors.baseWhite,borderRadius:5,padding:5,marginTop:15}}                            placeholder={strings.input_code}                            allowFontScaling={false}                            placeholderTextColor={colors.baseBlack}                            keyboardType={'numeric'}                            maxLength={4}                            onChangeText={(value) =>{                                this.setState({inputCode:value})                            }}                        />                    </View>                    <TouchableOpacity                        onPress={()=>{this.verifyFinal()}}                    >                        <View style={{backgroundColor:colors.primaryColor,width:'auto',borderRadius:10,padding:10,justifyContent:'center',alignItems:'center',marginTop:50}}>                            <Text style={{color:colors.baseWhite,fontSize:18}} allowFontScaling={false}>{strings.confirm}</Text>                        </View>                    </TouchableOpacity>                </View>            </Modal>        );    }    fetchCode=()=>{        if(this.state.verifyTel==null || this.state.verifyTel==''  || this.state.verifyTel==undefined){            alert(strings.null_tel)            return false        }        else{            // var num=Math.random()            // num=num*10000            // num=Math.floor(num)            var checkCode=Math.random()            var num = checkCode*9000            num +=1000;            num=parseInt(num)            this.setState({verifyCode:num})            this.props.dispatch(orderActions.sendVerifyCode(this.state.verifyTel.toString(),num.toString()));            return true        }    }    verifyFinal(){        if(this.state.inputCode==null || this.state.inputCode==''  || this.state.inputCode==undefined){            alert(strings.null_code)        }        else{            if(this.state.inputCode==this.state.verifyCode){                showCenterToast(strings.verify_success);                this.refs.verify.close()                this.props.dispatch(orderActions.setCustomerPhoneChecked(this.state.verifyTel.toString()));            }            else{                alert(strings.code_error)            }        }        console.log(this.props.phoneChecked)    }};const styles = StyleSheet.create({    container: {        flex:1,        alignItems:'center',        justifyContent: 'center',    },    stateWrapper:{        // flex:1,        // alignItems:'center',        // justifyContent: 'center'        // borderWidth:1,        marginTop:SCREEN_HEIGHT*0.01,        width:SCREEN_WIDTH*0.9,        // paddingTop:20,        // alignSelf:"flex-start"    },    stateText:{        fontSize:16,        margin:2,        lineHeight:18,    },    row:{        height:"auto",        width:SCREEN_WIDTH,        padding:15,        justifyContent:'space-between',        backgroundColor:colors.baseWhite,        borderBottomWidth:1,        borderColor:colors.saperatorLine,        flexDirection:"row",        alignItems:"center"    },    rowText:{        fontSize:20    }});const mapStateToProps = (state) => ({    auth: state.get('auth'),    unionId:state.get('auth').get('unionId'),    cartId:state.get('auth').get('cartId'),    username:state.get('auth').get('username'),    password:state.get('auth').get('password'),    root: state.get('root'),    mobilePhone:state.get('auth').get('mobilePhone'),    phoneChecked:state.get('auth').get('phoneChecked'),});export default connect(mapStateToProps)(Setting)